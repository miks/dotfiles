# New Block

snippet def
	def ${1:method_name}
		${0}
	end
snippet if
	if ${1:condition}
		${0}
	end
# def self
snippet defs
	def self.${1:class_method_name}
		${0}
	end
snippet :
	${1:key}: ${2:'value'}
# block
snippet b
	{ |${1:var}| ${0} }

#debugging
snippet pry
	binding.pry
##########################
#     Rspec snippets     #
##########################
snippet desc
	describe "#${1:method}" do
		${0}
	end
snippet cont
	context "${1:message}" do
		${0}
	end
snippet bef
	before :${1:each} do
		${0}
	end
snippet aft
	after :${1:each} do
		${0}
	end
snippet let
	let(:${1:object}) { ${0} }
snippet let!
	let!(:${1:object}) { ${0} }
snippet subj
	subject { ${0} }
snippet s.
	subject.${0:method}
snippet exp
	expect(${1:object}).to ${0}
snippet expb
	expect { ${1:object} }.to ${0}
snippet experr
	expect { ${1:object} }.to raise_error ${2:StandardError}, /${0:message_regex}/
snippet shared
	shared_examples ${0:"shared examples name"}
snippet ibl
	it_behaves_like ${0:"shared examples name"}
snippet it
	it "${1:spec_name}" do
		${0}
	end
